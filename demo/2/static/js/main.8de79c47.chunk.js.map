{"version":3,"sources":["Components/ImageSpinner.js","Components/Train.js","App.js","reportWebVitals.js","index.js"],"names":["ImageSpinner","props","handleLoad","setState","isLoading","state","info","dataFromParent","undefined","this","console","log","id","Spinner","style","display","animation","src","alt","onLoad","fluid","Component","Train","sendResponse","e","seed","Math","floor","random","target","innerHTML","setTimeout","selectedCategory","selectedBrand","handleChangeCategory","handleChangeBrand","value","label","response","isDisabled","Boolean","Container","Row","className","Col","sm","lg","ListGroup","Item","name","onChange","placeholder","options","categories","required","brands","SubmitBtn","Button","variant","onClick","size","disabled","block","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8de79c47.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Spinner } from 'react-bootstrap'\r\n\r\n\r\nclass ImageSpinner extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            info: props.dataFromParent,\r\n            isLoading: true\r\n        }\r\n    }\r\n    \r\n    handleLoad = () => this.setState({isLoading: false})\r\n\r\n\r\n    componentWillMount() {\r\n      (this.state.info === undefined) ? this.setState({isLoading: true}) : console.log('null')\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div id=\"image-spinner\">\r\n                <Spinner style={{display: (this.state.isLoading) ? \"block\" : \"none\"}} animation=\"border\" />\r\n                <img \r\n                  style={{display: (this.state.isLoading) ? \"none\" : \"flex\"}} \r\n                  src={this.state.info.src} \r\n                  alt={this.state.info.alt} \r\n                  onLoad={this.handleLoad} \r\n                  fluid/>\r\n            </div>\r\n        )    \r\n    }\r\n}\r\n\r\nexport default ImageSpinner","import React, {Component} from 'react'\r\nimport {Container, Row, Col, Button, ListGroup } from 'react-bootstrap'\r\nimport Select from 'react-select'\r\nimport ImageSpinner from './ImageSpinner'\r\n\r\nclass Train extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      info: {\r\n        id: \"KA52F\",\r\n        \"src\":\"https://picsum.photos/seed/picsum/321\",\r\n        \"alt\":\"alternative-text\",\r\n        \"name\": \"Lorem Ipsum\",\r\n        \"brands\": [\r\n          { value: 'chocolate', label: 'Chocolate' },\r\n          { value: 'strawberry', label: 'Strawberry' },\r\n          { value: 'vanilla', label: 'Vanilla' },\r\n          { value: 'purple', label: 'Purple' },\r\n          { value: 'red', label: 'Red' },\r\n          { value: 'orange', label: 'Orange' },\r\n          { value: 'blue', label: 'Blue' },\r\n          { value: 'green', label: 'Green' },\r\n          { value: 'white', label: 'White' },\r\n\r\n        ],\r\n        \"categories\": [\r\n          { value: \"Categoria 1\", label: \"Categoria 1\"  },\r\n          { value: \"Categoria 2\", label: \"Categoria 2\"  },\r\n          { value: \"Categoria 3\", label: \"Categoria 3\"  },\r\n          { value: \"Categoria 4\", label: \"Categoria 4\"  }\r\n        ]\r\n      },\r\n      response: {\r\n        id: 0\r\n      }\r\n    }\r\n  }\r\n  // Decomenttare una volta che si ha la \"route\" dell' API corretta, la funzione aggiorna il FE renderizzato con i dati del JSON in risposta\r\n  // ComponentDidMount(){\r\n  //   fetch('ROUTE')\r\n  //       .then(response => response.json())\r\n  //       .then(data => this.setState(data));\r\n  // }\r\n  // Funzione per inviare l'oggetto del form al backend, restituisce l'intero stato oltre al valore dell'opzione selezionata\r\n  sendResponse = (e) => {\r\n    // FAKE ricevimento di dati\r\n    let seed = Math.floor(Math.random() * (100 - 0)) + 0;\r\n    let info = this.state.info\r\n    info.id = `RND-${seed}`\r\n    info.src = `https://picsum.photos/seed/pic${seed}/321`\r\n    // Cambia la scritta prima di inviare la richiesta\r\n    e.target.innerHTML = \"Loading...\"\r\n    // Pulisci informazioni usate\r\n    this.setState({info: undefined})\r\n    // #####################\r\n    // INSERIRE QUI POST REQ\r\n    //  const requestOptions = {\r\n    //     method: 'POST',\r\n    //     headers: { 'Content-Type': 'application/json' },\r\n    //     body: JSON.stringify(this.state)\r\n    // };\r\n    // fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\r\n    //     .then(response => response.json())\r\n    //     .then(data => this.setState({ postId: data.id }));\r\n    // #####################\r\n    setTimeout(function() {\r\n      e.target.innerHTML = \"Invia risposta\"\r\n    }, 500);\r\n    // Prepara lo stato per il prossimo input\r\n    this.setState({info: info})\r\n    this.setState({selectedCategory: \"\"})\r\n    this.setState({selectedBrand: \"\"})\r\n  }\r\n  // Funzione per aggiornare in tempo reale l' option selezionata\r\n  handleChangeCategory = selectedCategory => this.setState({selectedCategory})\r\n  handleChangeBrand = selectedBrand => this.setState({selectedBrand})\r\n\r\n  render() {\r\n\r\n    let {selectedCategory, selectedBrand} = this.state;\r\n    let isDisabled = Boolean(selectedCategory && selectedBrand)\r\n\r\n    return(\r\n      <Container>\r\n        <Row id=\"form-ai\" className=\"bg-light shadow sic\">\r\n          <Col sm={12} lg={6}>\r\n          <ImageSpinner dataFromParent={this.state.info}/>\r\n            <ListGroup id =\"info-list\">\r\n              <ListGroup.Item><strong>ID: </strong> {this.state.info.id}</ListGroup.Item>\r\n              <ListGroup.Item><strong>SRC: </strong> {this.state.info.src}</ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col sm={12} lg={6}>\r\n            <p className=\"h3 py-2\">Cosa vedi nell' immagine?</p>\r\n            <ListGroup>\r\n              <ListGroup.Item><strong>Nome:</strong> {this.state.info.name}</ListGroup.Item>\r\n            </ListGroup>\r\n            <hr />\r\n\r\n            <p>Seleziona una categoria</p>\r\n            <Select \r\n              id=\"select-category\"\r\n              value={selectedCategory}\r\n              onChange={this.handleChangeCategory}\r\n              placeholder=\"Digita una categoria\"\r\n              options={this.state.info.categories} \r\n              required/>\r\n              <hr />\r\n            <p>Seleziona un brand (marca)</p>\r\n             <Select \r\n              value={selectedBrand}\r\n              onChange={this.handleChangeBrand}\r\n              placeholder=\"Digita un Brand (Marca)\"\r\n              options={this.state.info.brands} \r\n              required/>\r\n              <SubmitBtn isDisabled={!isDisabled} sendResponse={this.sendResponse}/>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Train;\r\n\r\nfunction SubmitBtn(props) {\r\n  return(\r\n    <Button \r\n      id=\"submitBtn\"\r\n      variant=\"success\" \r\n      onClick={(e) => props.sendResponse(e)} \r\n      size=\"lg\"\r\n      disabled={props.isDisabled}\r\n      block >Invia risposta</Button>\r\n  )\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss'\n\nimport {HashRouter as Router, Route} from 'react-router-dom'\n\n\nimport Train from './Components/Train'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n            <Route exact path=\"/\">\n              <Train />\n            </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}