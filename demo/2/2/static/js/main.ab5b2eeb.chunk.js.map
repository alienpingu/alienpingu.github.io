{"version":3,"sources":["Components/Train.js","App.js","reportWebVitals.js","index.js"],"names":["Train","props","sendResponse","e","target","innerHTML","setState","selectedCategory","selectedBtn","setTimeout","seed","Math","floor","random","info","state","id","src","handleChange","value","label","response","prevState","console","log","this","isDisabled","Boolean","Container","Row","className","Col","sm","lg","alt","fluid","thumbnail","ListGroup","Item","name","onChange","placeholder","options","brands","required","map","el","Button","variant","onClick","size","block","SubmitBtn","Component","disabled","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab5b2eeb.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {Container, Row, Col, Button, ListGroup } from 'react-bootstrap'\r\n\r\nimport Select from 'react-select';\r\n\r\nclass Train extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      info: {\r\n        id: \"KA52F\",\r\n        \"src\":\"https://picsum.photos/seed/picsum/321\",\r\n        \"name\": \"Lorem Ipsum\",\r\n        \"brands\": [\r\n          { value: 'chocolate', label: 'Chocolate' },\r\n          { value: 'strawberry', label: 'Strawberry' },\r\n          { value: 'vanilla', label: 'Vanilla' },\r\n          { value: 'purple', label: 'Purple' },\r\n          { value: 'red', label: 'Red' },\r\n          { value: 'orange', label: 'Orange' },\r\n          { value: 'blue', label: 'Blue' },\r\n          { value: 'green', label: 'Green' },\r\n          { value: 'white', label: 'White' },\r\n\r\n        ],\r\n        \"options\": [\r\n          { value: \"Pulsante 1\", label: \"Pulsante 1\"  },\r\n          { value: \"Pulsante 2\", label: \"Pulsante 2\"  },\r\n          { value: \"Pulsante 3\", label: \"Pulsante 3\"  },\r\n          { value: \"Pulsante 4\", label: \"Pulsante 4\"  }\r\n        ]\r\n      },\r\n      response: {\r\n        id: 0\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // Decomenttare una volta che si ha la \"route\" dell' API corretta, la funzione aggiorna il FE renderizzato con i dati del JSON in risposta\r\n\r\n  // ComponentDidMount(){\r\n  //   fetch('ROUTE')\r\n  //       .then(response => response.json())\r\n  //       .then(data => this.setState(data));\r\n  // }\r\n\r\n  // Funzione per inviare l'oggetto del form al backend, restituisce l'intero stato oltre al valore dell'opzione selezionata\r\n\r\n  sendResponse = (e) => {\r\n    //  const requestOptions = {\r\n    //     method: 'POST',\r\n    //     headers: { 'Content-Type': 'application/json' },\r\n    //     body: JSON.stringify(this.state)\r\n    // };\r\n    // fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\r\n    //     .then(response => response.json())\r\n    //     .then(data => this.setState({ postId: data.id }));\r\n    e.target.innerHTML = \"Loading...\"\r\n    this.setState({selectedCategory: \"\"})\r\n    this.setState({selectedBtn: \"\"})\r\n    setTimeout(function() {\r\n      e.target.innerHTML = \"Invia risposta\"\r\n    }, 500);\r\n    let seed = Math.floor(Math.random() * (100 - 0)) + 0;\r\n    let info = this.state.info\r\n    info.id = `RND-${seed}`\r\n    info.src = `https://picsum.photos/seed/pic${seed}/321`\r\n    this.setState({info: info})\r\n\r\n  }\r\n  // Funzione per aggiornare in tempo reale l' option selezionata\r\n  handleChange = selectedCategory => this.setState({selectedCategory})\r\n\r\n  componentDidUpdate(prevState) {\r\n    console.log(\"Pagina aggiornata\")\r\n  }\r\n\r\n  render() {\r\n\r\n    let {selectedCategory, selectedBtn} = this.state;\r\n    let isDisabled = Boolean(selectedCategory && selectedBtn)\r\n    return(\r\n      <Container>\r\n        <Row id=\"form-ai\" className=\"bg-light shadow p-md-5 sic\">\r\n          <Col sm={12} lg={6}>\r\n           <img id=\"foto-ai\" src={this.state.info.src} alt=\"what-is-this\" className=\"w-100 py-2 sic\" fluid thumbnail />\r\n            <ListGroup className=\"py-md-2\">\r\n              <ListGroup.Item><strong>ID: </strong> {this.state.info.id}</ListGroup.Item>\r\n              <ListGroup.Item><strong>SRC: </strong> {this.state.info.src}</ListGroup.Item>\r\n            </ListGroup>\r\n          </Col>\r\n          <Col sm={12} lg={6}>\r\n            <h3 className=\"py-2 mb-md-5\">Cosa vedi nell' immagine?</h3>\r\n            <ListGroup>\r\n              <ListGroup.Item><strong>Nome:</strong> {this.state.info.name}</ListGroup.Item>\r\n            </ListGroup>\r\n              <Select \r\n                value={selectedCategory}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Seleziona un brand (marca)\"\r\n                options={this.state.info.brands} \r\n                required/>\r\n          \r\n            <div className=\"options py-2\">\r\n              {\r\n                this.state.info.options.map((el, id) => {\r\n                  return(<Button \r\n                    key={id} \r\n                    variant=\"outline-primary\" \r\n                    onClick={()=> this.setState({selectedBtn: el.value})} \r\n                    className={`my-lg-4 ${(selectedBtn === el.value) ? 'active' : \"\"}`}\r\n                    size=\"lg\"\r\n                    block>{el.label}\r\n                  </Button>)\r\n                })\r\n              }\r\n            </div>\r\n          </Col>\r\n          <Col sm=\"12\">\r\n            <SubmitBtn isDisabled={!isDisabled} sendResponse={this.sendResponse}/>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Train;\r\n\r\n\r\nfunction SubmitBtn(props) {\r\n  return(\r\n    <Button \r\n      variant=\"success\" \r\n      onClick={(e) => props.sendResponse(e)} \r\n      size=\"lg\"\r\n      className=\"my-2 p-md-3\"\r\n      disabled={props.isDisabled}\r\n      block >Invia risposta</Button>\r\n  )\r\n\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss'\n\nimport {HashRouter as Router, Route} from 'react-router-dom'\n\n\nimport Train from './Components/Train'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n            <Route path=\"/\">\n              <Train />\n            </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}